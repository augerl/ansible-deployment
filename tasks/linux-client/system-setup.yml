---
- name: Get current Linux Distribution
  set_fact:
    current_distribution: "{{ ansible_facts.distribution }}"

- name: Install some necassary system stuff on Arch
  pacman:
    name:
      - git
      - base-devel
      - cronie
      - python-psutil
      - python-pexpect
      - python-pipx
      - tlp
      - tlp-rdw
      - go
      - inter-font
      - curl
      - wget
      - jq
      - gnome-extensions
    state: latest

- name: start and enable cronie daemon
  service:
    name: cronie
    state: started
    enabled: true

- name: Check if Meslo font directory exists
  stat:
    path: "/usr/share/fonts/Meslo"
  register: meslo_font_status

- name: Create Meslo directory if not exists
  file:
    path: /usr/share/fonts/Meslo
    state: directory

- name: Download Meslo Nerd Font
  unarchive:
    src: https://github.com/ryanoasis/nerd-fonts/releases/latest/download/Meslo.tar.xz
    dest: "/usr/share/fonts/Meslo"
    remote_src: yes
  when: meslo_font_status.stat.exists == false

- name: Check if Inter font directory exists
  stat:
    path: "/usr/share/fonts/inter"
  register: inter_font_status

- name: Update Font cache 
  command: fc-cache -fv

- name: Uncomment the line in /etc/locale.gen on Arch Linux
  lineinfile:
    path: /etc/locale.gen
    regexp: '^#de_AT.UTF-8 UTF-8'
    line: 'de_AT.UTF-8 UTF-8'

- name: Update locales on Arch Linux
  command: locale-gen

- name: Set locales with dconf on Arch Linux
  dconf:
    key: "/system/locale/region"
    value: "'de_AT.UTF-8'"

- name: Hide unused applications from Application Launcher
  blockinfile:
    path: "/usr/share/applications/{{ item }}"
    block: |
      NoDisplay=true
    insertbefore: EOF
  with_items:
    - avahi-discover.desktop
    - bssh.desktop
    - bvnc.desktop
    - lstopo.desktop
    - htop.desktop
    - qv4l2.desktop
    - qvidcap.desktop
    - vim.desktop
    - org.gnome.Tour.desktop
    - yelp.desktop
  ignore_errors: true

- name: Get current username
  set_fact:
    current_user: "{{ lookup('env', 'USER') }}"

- name: Check if the user file exists
  stat:
    path: "/var/lib/AccountsService/users/{{ current_user }}"
  register: userfile_stat

- name: Create the file if it doesn't exist
  lineinfile:
    path: "/var/lib/AccountsService/users/{{ current_user }}"
    create: yes
    line: |
      [User]
      Session=
      Icon=/var/lib/AccountsService/icons/{{ current_user }}
      SystemAccount=false
    owner: root
    group: root
    mode: '0644'
  when: not userfile_stat.stat.exists

- name: users | set profile image
  lineinfile:
    path: "/var/lib/AccountsService/users/{{ current_user }}"
    regexp: '^Icon=.*'
    line: 'Icon=/var/lib/AccountsService/icons/{{ current_user }}'
    state: present
  when: userfile_stat.stat.exists

- name: Copy profile image
  copy:
    src: files/user/profile.png
    dest: "/var/lib/AccountsService/icons/{{ current_user }}"
    owner: root
    group: root
    mode: 0644

- name: remove preinstalled clutter from home directory
  file:
    path: /home/andreas/{{ item }}
    state: absent
  with_items:
    - examples.desktop
    - Desktop
    - Documents
    - Downloads
    - Music
    - Pictures
    - Public
    - Templates
    - Videos
    - Schreibtisch
    - Bilder
    - Vorlagen
    - Musik
    - Ã–ffentlich
    - Dokumente

- name: create config directories
  file:
    path: /home/{{ current_user }}/{{ item.dir }}
    state: directory
    owner: "{{ current_user }}"
    group: "{{ current_user }}"
    mode: 0700
  with_items:
    - { dir: '.config' }
    - { dir: '.config/alacritty' }
    - { dir: '.config/tmux' }
    - { dir: '.config/tmux/plugins' }
    - { dir: '.config/zsh' }

- name: create personal directories
  file:
    path: /home/{{ current_user }}/{{ item.dir }}
    state: directory
    owner: "{{ current_user }}"
    group: "{{ current_user }}"
    mode: 0700
  with_items:
    - { dir: desktop }
    - { dir: documents }
    - { dir: downloads }
    - { dir: projects }
    - { dir: scripts }
    - { dir: templates }
    - { dir: music }
    - { dir: pictures }
    - { dir: videos }

- name: copy user-dirs.dirs
  copy:
    src: files/user/user-dirs.dirs
    dest: /home/{{ current_user }}/.config/user-dirs.dirs
    owner: "{{ current_user }}"
    group: "{{ current_user }}"
    mode: 0600

- name: Check if yay directory already exists
  stat:
    path: "/home/{{ current_user }}/projects/yay"
  register: yay_status

- name: clone yay repository
  git:
    repo: https://aur.archlinux.org/yay.git
    dest: /home/{{ current_user }}/projects/yay
  when: yay_status.stat.exists == false

- name: Check if yay directory already exists
  stat:
    path: "/home/{{ current_user }}/projects/yay"
  register: yay_status

- name: make yay directory accessible
  file:
    path: /home/{{ current_user }}/projects/yay
    state: directory
    recurse: yes
    owner: "{{ current_user }}"
    group: "{{ current_user }}"
    mode: 0700
  when: yay_status.stat.exists == true

- name: Check if yay is installed
  command: "which yay"
  register: yay_check
  ignore_errors: true

- name: install yay
  become: no
  shell: "yes | makepkg -si"
  args:
    chdir: /home/{{ current_user }}/projects/yay
  when: yay_check.rc != 0

- name: copy tlp config file to /etc
  copy:
    src: files/tlp/tlp.conf
    dest: /etc/tlp.conf
    owner: root
    group: root
    mode: '0644'

- name: Enable tlp.service
  systemd:
    name: tlp.service
    enabled: yes

- name: Enable NetworkManager-dispatcher.service
  systemd:
    name: NetworkManager-dispatcher.service
    enabled: yes

- name: Mask systemd-rfkill.service
  systemd:
    name: systemd-rfkill.service
    masked: yes

- name: Mask systemd-rfkill.socket
  systemd:
    name: systemd-rfkill.socket
    masked: yes